### Makefile for the project

### ==================================================================
### Public variables
### ==================================================================

## The current list of packages as provided by the user.
PACKAGES ?=

### ==================================================================
### Private variables
### ==================================================================

## File containing the full list of packages in order of dependency.
_PACKAGES_FILE = misc/make/packages

## Command to generate the full list of packages from the above file.
define _GENERATE_PACKAGES_LIST =
${SHELL} misc/make/generate-packages-list.sh ${_PACKAGES_FILE}
endef

## The full list of packages.
_ALL_PACKAGES ?= $(shell ${_GENERATE_PACKAGES_LIST})

## The current list of packages.
_PACKAGES = $(strip ${PACKAGES})
ifeq (${_PACKAGES},)
_PACKAGES = ${_ALL_PACKAGES}
endif

## Command to generate the ordered list of current packages.
define _GENERATE_PACKAGES_ORDER =
${SHELL} misc/make/list-head.sh "${_ALL_PACKAGES}" "${_PACKAGES}"
endef

## The ordered list of current packages.
_PACKAGES_ORDER = $(shell ${_GENERATE_PACKAGES_ORDER})

## The Coq project file.  It is automatically generated by a script in
## this project from the above ordered list of packages and the list
## of files in each of those packages.
_COQ_PROJECT_FILE = _CoqProject

## The summary file of a package.
define _PACKAGE_SUMMARY_FILE =
UniMath/$1/All.v
endef

## The combined summary file for all the current packages.
define _COMBINED_SUMMARY_FILE =
UniMath/All.v
endef

## Command to generate the above Coq project file.
define _GENERATE_COQ_PROJECT_FILE =
for _package in ${_PACKAGES_ORDER}; do \
${SHELL} misc/make/generate-package-summary-file.sh  $${_package} \
> $(call _PACKAGE_SUMMARY_FILE,$${_package}) ; \
done

${SHELL} misc/make/generate-combined-summary-file.sh ${_PACKAGES_ORDER} \
> ${_COMBINED_SUMMARY_FILE}

${SHELL} misc/make/generate-coq-project-file.sh ${_PACKAGES_ORDER} \
> ${_COQ_PROJECT_FILE}
endef

## The Coq Makefile.  It is automatically generated by the
## `coq_makefile' command from the above Coq project file.
_COQ_MAKEFILE = _CoqMakefile

## Command to generate the above Coq Makefile.
define _GENERATE_COQ_MAKEFILE =
coq_makefile -f ${_COQ_PROJECT_FILE} -o ${_COQ_MAKEFILE}
endef

## The packages Makefile.  It will have rules for building individual
## packages, and individual files in those packages.
_PACKAGES_MAKEFILE = _PackagesMakefile

## Command to generate the above packages Makefile.
define _GENERATE_PACKAGES_MAKEFILE =
${SHELL} misc/make/generate-packages-makefile.sh ${_PACKAGES_ORDER} \
> ${_PACKAGES_MAKEFILE}
endef

## Command to remove various generated files.
define _REMOVE_GENERATED_FILES =
${RM} \
${_COQ_PROJECT_FILE} \
${_COQ_MAKEFILE} \
${_COQ_MAKEFILE}.conf \
${_PACKAGES_MAKEFILE}

for _package in ${_PACKAGES_ORDER}; do \
${RM} $(call _PACKAGE_SUMMARY_FILE,$${_package}) ; \
done

${RM} ${_COMBINED_SUMMARY_FILE}
endef

## If the variable VERBOSE has a blank value, execute recipes silently
## without printing them.
ifeq ($(strip ${VERBOSE}),)
MAKEFLAGS += --silent
endif

## The default target.
.DEFAULT_GOAL = all

### ==================================================================
### Targets
### ==================================================================

.PHONY: ${_COQ_PROJECT_FILE}
${_COQ_PROJECT_FILE}:
	${_GENERATE_COQ_PROJECT_FILE}

.PHONY: ${_COQ_MAKEFILE}
${_COQ_MAKEFILE}: ${_COQ_PROJECT_FILE}
	${_GENERATE_COQ_MAKEFILE}

.PHONY: makefiles
makefiles: ${_COQ_MAKEFILE}

.PHONY: all clean cleanall html
all clean cleanall html: makefiles
	${MAKE} --file=${_COQ_MAKEFILE} --no-print-directory $@

.PHONY: distclean
distclean: cleanall
	${_REMOVE_GENERATED_FILES}

### ==================================================================
### Include the packages Makefile
### ==================================================================

${_PACKAGES_MAKEFILE}:
	${_GENERATE_PACKAGES_MAKEFILE}

include ${_PACKAGES_MAKEFILE}

### End of file
